// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "rankdb": multilist TestHelpers
//
// Command:
// $ goagen
// --design=github.com/Vivino/rankdb/api/design
// --out=$(GOPATH)/src/github.com/Vivino/rankdb/api
// --version=v1.4.1

package test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"

	"github.com/Vivino/rankdb/api/app"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
)

// BackupMultilistBadRequest runs the method Backup of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func BackupMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, payload *app.MultiListBackup) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/xlist/backup"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	backupCtx, __err := app.NewBackupMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	backupCtx.Payload = payload

	// Perform action
	__err = ctrl.Backup(backupCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// BackupMultilistCreated runs the method Backup of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func BackupMultilistCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, payload *app.MultiListBackup) (http.ResponseWriter, *app.RankdbCallback) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/xlist/backup"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	backupCtx, __err := app.NewBackupMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	backupCtx.Payload = payload

	// Perform action
	__err = ctrl.Backup(backupCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.RankdbCallback
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.RankdbCallback)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbCallback", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// BackupMultilistOK runs the method Backup of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func BackupMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, payload *app.MultiListBackup) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/xlist/backup"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	backupCtx, __err := app.NewBackupMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	backupCtx.Payload = payload

	// Perform action
	__err = ctrl.Backup(backupCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}

	// Return results
	return rw
}

// BackupMultilistUnauthorized runs the method Backup of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func BackupMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, payload *app.MultiListBackup) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/xlist/backup"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	backupCtx, __err := app.NewBackupMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	backupCtx.Payload = payload

	// Perform action
	__err = ctrl.Backup(backupCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// CreateMultilistBadRequest runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	createCtx, __err := app.NewCreateMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	createCtx.Payload = payload

	// Perform action
	__err = ctrl.Create(createCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// CreateMultilistOK runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	createCtx, __err := app.NewCreateMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	createCtx.Payload = payload

	// Perform action
	__err = ctrl.Create(createCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.RankdbResultlist)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// CreateMultilistUnauthorized runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	createCtx, __err := app.NewCreateMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	createCtx.Payload = payload

	// Perform action
	__err = ctrl.Create(createCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// DeleteMultilistBadRequest runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, errorsOnly bool, lists []string, matchMetadata *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// DeleteMultilistOK runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, errorsOnly bool, lists []string, matchMetadata *string) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.RankdbResultlist)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// DeleteMultilistUnauthorized runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, errorsOnly bool, lists []string, matchMetadata *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// GetMultilistBadRequest runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, lists []string, matchMetadata *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	getCtx, _err := app.NewGetMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// GetMultilistOK runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, lists []string, matchMetadata *string) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	getCtx, _err := app.NewGetMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.RankdbResultlist)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// GetMultilistUnauthorized runs the method Get of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, elementID string, allInSets []string, lists []string, matchMetadata *string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := allInSets
		query["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		query["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		query["match_metadata"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements/%v", elementID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["element_id"] = []string{fmt.Sprintf("%v", elementID)}
	{
		sliceVal := allInSets
		prms["all_in_sets"] = sliceVal
	}
	{
		sliceVal := lists
		prms["lists"] = sliceVal
	}
	if matchMetadata != nil {
		sliceVal := []string{*matchMetadata}
		prms["match_metadata"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	getCtx, _err := app.NewGetMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Get(getCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// PutMultilistBadRequest runs the method Put of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PutMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	putCtx, __err := app.NewPutMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	putCtx.Payload = payload

	// Perform action
	__err = ctrl.Put(putCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// PutMultilistOK runs the method Put of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PutMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	putCtx, __err := app.NewPutMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	putCtx.Payload = payload

	// Perform action
	__err = ctrl.Put(putCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.RankdbResultlist)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// PutMultilistUnauthorized runs the method Put of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func PutMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, results bool, payload *app.ListPayloadQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		return nil, e
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		query["results"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/elements"),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", results)}
		prms["results"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	putCtx, __err := app.NewPutMultilistContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		return nil, _e
	}
	putCtx.Payload = payload

	// Perform action
	__err = ctrl.Put(putCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(error)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// ReindexMultilistBadRequest runs the method Reindex of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ReindexMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, payload *app.ListQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/reindex"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	reindexCtx, _err := app.NewReindexMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}
	reindexCtx.Payload = payload

	// Perform action
	_err = ctrl.Reindex(reindexCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// ReindexMultilistOK runs the method Reindex of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ReindexMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, payload *app.ListQL) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/reindex"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	reindexCtx, _err := app.NewReindexMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}
	reindexCtx.Payload = payload

	// Perform action
	_err = ctrl.Reindex(reindexCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.RankdbResultlist)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ReindexMultilistUnauthorized runs the method Reindex of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ReindexMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, errorsOnly bool, payload *app.ListQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/reindex"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	reindexCtx, _err := app.NewReindexMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}
	reindexCtx.Payload = payload

	// Perform action
	_err = ctrl.Reindex(reindexCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// RestoreMultilistBadRequest runs the method Restore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RestoreMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, keep bool, listIDPrefix *string, listIDSuffix *string, src string, srcFile string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		query["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		query["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		query["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		query["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		query["src_file"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/restore"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		prms["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		prms["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		prms["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		prms["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		prms["src_file"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	restoreCtx, _err := app.NewRestoreMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Restore(restoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// RestoreMultilistOK runs the method Restore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RestoreMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, keep bool, listIDPrefix *string, listIDSuffix *string, src string, srcFile string) (http.ResponseWriter, *app.RankdbRestoreresult) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		query["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		query["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		query["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		query["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		query["src_file"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/restore"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		prms["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		prms["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		prms["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		prms["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		prms["src_file"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	restoreCtx, _err := app.NewRestoreMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Restore(restoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbRestoreresult
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.RankdbRestoreresult)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbRestoreresult", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// RestoreMultilistUnauthorized runs the method Restore of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RestoreMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, keep bool, listIDPrefix *string, listIDSuffix *string, src string, srcFile string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		query["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		query["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		query["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		query["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		query["src_file"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/restore"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", keep)}
		prms["keep"] = sliceVal
	}
	if listIDPrefix != nil {
		sliceVal := []string{*listIDPrefix}
		prms["list_id_prefix"] = sliceVal
	}
	if listIDSuffix != nil {
		sliceVal := []string{*listIDSuffix}
		prms["list_id_suffix"] = sliceVal
	}
	{
		sliceVal := []string{src}
		prms["src"] = sliceVal
	}
	{
		sliceVal := []string{srcFile}
		prms["src_file"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	restoreCtx, _err := app.NewRestoreMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Restore(restoreCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// VerifyMultilistBadRequest runs the method Verify of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func VerifyMultilistBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, clear bool, elements bool, errorsOnly bool, repair bool, payload *app.ListQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		query["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		query["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		query["repair"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/verify"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		prms["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		prms["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		prms["repair"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	verifyCtx, _err := app.NewVerifyMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}
	verifyCtx.Payload = payload

	// Perform action
	_err = ctrl.Verify(verifyCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// VerifyMultilistOK runs the method Verify of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func VerifyMultilistOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, clear bool, elements bool, errorsOnly bool, repair bool, payload *app.ListQL) (http.ResponseWriter, *app.RankdbResultlist) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		query["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		query["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		query["repair"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/verify"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		prms["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		prms["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		prms["repair"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	verifyCtx, _err := app.NewVerifyMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}
	verifyCtx.Payload = payload

	// Perform action
	_err = ctrl.Verify(verifyCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.RankdbResultlist
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.RankdbResultlist)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.RankdbResultlist", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// VerifyMultilistUnauthorized runs the method Verify of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func VerifyMultilistUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.MultilistController, clear bool, elements bool, errorsOnly bool, repair bool, payload *app.ListQL) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		query["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		query["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		query["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		query["repair"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/xlist/verify"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	{
		sliceVal := []string{fmt.Sprintf("%v", clear)}
		prms["clear"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", elements)}
		prms["elements"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", errorsOnly)}
		prms["errors_only"] = sliceVal
	}
	{
		sliceVal := []string{fmt.Sprintf("%v", repair)}
		prms["repair"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "MultilistTest"), rw, req, prms)
	verifyCtx, _err := app.NewVerifyMultilistContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}
	verifyCtx.Payload = payload

	// Perform action
	_err = ctrl.Verify(verifyCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}
