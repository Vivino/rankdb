// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "rankdb": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/Vivino/rankdb/api/design
// --out=$(GOPATH)/src/github.com/Vivino/rankdb/api
// --version=v1.4.1

package app

import (
	"context"
	"net/http"
	"strconv"
	"unicode/utf8"

	"github.com/goadesign/goa"
)

// DeleteBackupContext provides the backup delete action context.
type DeleteBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BackupID string
}

// NewDeleteBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller delete action.
func NewDeleteBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBackupID := req.Params["backup_id"]
	if len(paramBackupID) > 0 {
		rawBackupID := paramBackupID[0]
		rctx.BackupID = rawBackupID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteBackupContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteBackupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBackupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// StatusBackupContext provides the backup status action context.
type StatusBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BackupID string
}

// NewStatusBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller status action.
func NewStatusBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*StatusBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := StatusBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBackupID := req.Params["backup_id"]
	if len(paramBackupID) > 0 {
		rawBackupID := paramBackupID[0]
		rctx.BackupID = rawBackupID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *StatusBackupContext) OK(r *RankdbBackupStatus) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.backup_status+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *StatusBackupContext) OKFull(r *RankdbBackupStatusFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.backup_status+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *StatusBackupContext) OKTiny(r *RankdbBackupStatusTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.backup_status+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *StatusBackupContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *StatusBackupContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// CreateElementsContext provides the elements create action context.
type CreateElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID  string
	Range   int
	Payload *Element
}

// NewCreateElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller create action.
func NewCreateElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 5
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 0, true))
		}
		if rctx.Range > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *CreateElementsContext) OKFull(r *RankdbElementFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateElementsContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// DeleteElementsContext provides the elements delete action context.
type DeleteElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ElementID string
	ListID    string
}

// NewDeleteElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller delete action.
func NewDeleteElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteElementsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// DeleteMultiElementsContext provides the elements delete-multi action context.
type DeleteMultiElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ElementIds []string
	ListID     string
}

// NewDeleteMultiElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller delete-multi action.
func NewDeleteMultiElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMultiElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMultiElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramElementIds := req.Params["element_ids"]
	if len(paramElementIds) > 0 {
		params := paramElementIds
		rctx.ElementIds = params
		for _, param := range rctx.ElementIds {
			if ok := goa.ValidatePattern(`^[0-9]+$`, param); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`element_ids[0]`, param, `^[0-9]+$`))
			}
			if utf8.RuneCountInString(param) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`element_ids[0]`, param, utf8.RuneCountInString(param), 1, true))
			}
			if utf8.RuneCountInString(param) > 20 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`element_ids[0]`, param, utf8.RuneCountInString(param), 20, false))
			}
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteMultiElementsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMultiElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteMultiElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteMultiElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetElementsContext provides the elements get action context.
type GetElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ElementID string
	ListID    string
	Range     int
}

// NewGetElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller get action.
func NewGetElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 5
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 0, true))
		}
		if rctx.Range > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetElementsContext) OKFull(r *RankdbElementFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetAroundElementsContext provides the elements get-around action context.
type GetAroundElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ElementID string
	ListID    string
	Range     int
	Payload   *MultiElement
}

// NewGetAroundElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller get-around action.
func NewGetAroundElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAroundElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAroundElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 5
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 0, true))
		}
		if rctx.Range > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetAroundElementsContext) OKFull(r *RankdbElementFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAroundElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetAroundElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetAroundElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetMultiElementsContext provides the elements get-multi action context.
type GetMultiElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID  string
	Payload *MultiElement
}

// NewGetMultiElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller get-multi action.
func NewGetMultiElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMultiElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMultiElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMultiElementsContext) OK(r *RankdbMultielement) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.multielement+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetMultiElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetMultiElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetMultiElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// PutElementsContext provides the elements put action context.
type PutElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ElementID string
	ListID    string
	Range     int
	Payload   *Element
}

// NewPutElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller put action.
func NewPutElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PutElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PutElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 5
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 0, true))
		}
		if rctx.Range > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 100, false))
		}
	}
	return &rctx, err
}

// OKFullUpdate sends a HTTP response with status code 200.
func (ctx *PutElementsContext) OKFullUpdate(r *RankdbElementFullUpdate) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PutElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PutElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PutElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// PutMultiElementsContext provides the elements put-multi action context.
type PutMultiElementsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID  string
	Results bool
	Payload PutMultiElementsPayload
}

// NewPutMultiElementsContext parses the incoming request URL and body, performs validations and creates the
// context used by the elements controller put-multi action.
func NewPutMultiElementsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PutMultiElementsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PutMultiElementsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramResults := req.Params["results"]
	if len(paramResults) == 0 {
		rctx.Results = false
	} else {
		rawResults := paramResults[0]
		if results, err2 := strconv.ParseBool(rawResults); err2 == nil {
			rctx.Results = results
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("results", rawResults, "boolean"))
		}
	}
	return &rctx, err
}

// PutMultiElementsPayload is the elements put-multi action payload.
type PutMultiElementsPayload []*Element

// Validate runs the validation rules defined in the design.
func (payload PutMultiElementsPayload) Validate() (err error) {
	for _, e := range payload {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PutMultiElementsContext) OK(r *RankdbMultielement) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.multielement+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PutMultiElementsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PutMultiElementsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PutMultiElementsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(r *RankdbSysinfo) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.sysinfo+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *HealthHealthContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// RootHealthContext provides the health root action context.
type RootHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRootHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller root action.
func NewRootHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*RootHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RootHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RootHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RootHealthContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// JWTJWTContext provides the jwt jwt action context.
type JWTJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Expire       int
	OnlyElements *string
	OnlyLists    *string
	Scope        string
}

// NewJWTJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller jwt action.
func NewJWTJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*JWTJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := JWTJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramExpire := req.Params["expire"]
	if len(paramExpire) == 0 {
		rctx.Expire = 1440
	} else {
		rawExpire := paramExpire[0]
		if expire, err2 := strconv.Atoi(rawExpire); err2 == nil {
			rctx.Expire = expire
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("expire", rawExpire, "integer"))
		}
		if rctx.Expire < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`expire`, rctx.Expire, 1, true))
		}
	}
	paramOnlyElements := req.Params["only_elements"]
	if len(paramOnlyElements) > 0 {
		rawOnlyElements := paramOnlyElements[0]
		rctx.OnlyElements = &rawOnlyElements
	}
	paramOnlyLists := req.Params["only_lists"]
	if len(paramOnlyLists) > 0 {
		rawOnlyLists := paramOnlyLists[0]
		rctx.OnlyLists = &rawOnlyLists
	}
	paramScope := req.Params["scope"]
	if len(paramScope) == 0 {
		rctx.Scope = "api:read"
	} else {
		rawScope := paramScope[0]
		rctx.Scope = rawScope
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *JWTJWTContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *JWTJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// CloneListsContext provides the lists clone action context.
type CloneListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID  string
	Payload *RankList
}

// NewCloneListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller clone action.
func NewCloneListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CloneListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CloneListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *CloneListsContext) OKFull(r *RankdbRanklistFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.ranklist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CloneListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CloneListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CloneListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CloneListsContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// CreateListsContext provides the lists create action context.
type CreateListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Replace bool
	Payload *RankList
}

// NewCreateListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller create action.
func NewCreateListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramReplace := req.Params["replace"]
	if len(paramReplace) == 0 {
		rctx.Replace = false
	} else {
		rawReplace := paramReplace[0]
		if replace, err2 := strconv.ParseBool(rawReplace); err2 == nil {
			rctx.Replace = replace
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("replace", rawReplace, "boolean"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *CreateListsContext) OKFull(r *RankdbRanklistFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.ranklist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateListsContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// DeleteListsContext provides the lists delete action context.
type DeleteListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID string
}

// NewDeleteListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller delete action.
func NewDeleteListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteListsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// GetListsContext provides the lists get action context.
type GetListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID    string
	TopBottom bool
}

// NewGetListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller get action.
func NewGetListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramTopBottom := req.Params["top_bottom"]
	if len(paramTopBottom) == 0 {
		rctx.TopBottom = false
	} else {
		rawTopBottom := paramTopBottom[0]
		if topBottom, err2 := strconv.ParseBool(rawTopBottom); err2 == nil {
			rctx.TopBottom = topBottom
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("top_bottom", rawTopBottom, "boolean"))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetListsContext) OKFull(r *RankdbRanklistFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.ranklist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetPercentileListsContext provides the lists get-percentile action context.
type GetPercentileListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FromTop string
	ListID  string
	Range   int
}

// NewGetPercentileListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller get-percentile action.
func NewGetPercentileListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetPercentileListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetPercentileListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFromTop := req.Params["from_top"]
	if len(paramFromTop) == 0 {
		rctx.FromTop = "50.0"
	} else {
		rawFromTop := paramFromTop[0]
		rctx.FromTop = rawFromTop
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRange := req.Params["range"]
	if len(paramRange) == 0 {
		rctx.Range = 5
	} else {
		rawRange := paramRange[0]
		if range_, err2 := strconv.Atoi(rawRange); err2 == nil {
			rctx.Range = range_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("range", rawRange, "integer"))
		}
		if rctx.Range < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 0, true))
		}
		if rctx.Range > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`range`, rctx.Range, 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetPercentileListsContext) OKFull(r *RankdbElementFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetPercentileListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetPercentileListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetPercentileListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetRangeListsContext provides the lists get-range action context.
type GetRangeListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FromBottom *int
	FromTop    *int
	Limit      int
	ListID     string
}

// NewGetRangeListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller get-range action.
func NewGetRangeListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetRangeListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetRangeListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFromBottom := req.Params["from_bottom"]
	if len(paramFromBottom) > 0 {
		rawFromBottom := paramFromBottom[0]
		if fromBottom, err2 := strconv.Atoi(rawFromBottom); err2 == nil {
			tmp11 := fromBottom
			tmp10 := &tmp11
			rctx.FromBottom = tmp10
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from_bottom", rawFromBottom, "integer"))
		}
		if rctx.FromBottom != nil {
			if *rctx.FromBottom < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`from_bottom`, *rctx.FromBottom, 0, true))
			}
		}
	}
	paramFromTop := req.Params["from_top"]
	if len(paramFromTop) > 0 {
		rawFromTop := paramFromTop[0]
		if fromTop, err2 := strconv.Atoi(rawFromTop); err2 == nil {
			tmp13 := fromTop
			tmp12 := &tmp13
			rctx.FromTop = tmp12
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from_top", rawFromTop, "integer"))
		}
		if rctx.FromTop != nil {
			if *rctx.FromTop < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`from_top`, *rctx.FromTop, 0, true))
			}
		}
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 25
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1000, false))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetRangeListsContext) OK(r RankdbElementCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json; type=collection")
	}
	if r == nil {
		r = RankdbElementCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFull sends a HTTP response with status code 200.
func (ctx *GetRangeListsContext) OKFull(r RankdbElementFullCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json; type=collection")
	}
	if r == nil {
		r = RankdbElementFullCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFullUpdate sends a HTTP response with status code 200.
func (ctx *GetRangeListsContext) OKFullUpdate(r RankdbElementFullUpdateCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json; type=collection")
	}
	if r == nil {
		r = RankdbElementFullUpdateCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *GetRangeListsContext) OKTiny(r RankdbElementTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.element+json; type=collection")
	}
	if r == nil {
		r = RankdbElementTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetRangeListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetRangeListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetRangeListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// GetAllListsContext provides the lists get_all action context.
type GetAllListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AfterID  string
	BeforeID string
	Limit    int
}

// NewGetAllListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller get_all action.
func NewGetAllListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetAllListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetAllListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAfterID := req.Params["after_id"]
	if len(paramAfterID) == 0 {
		rctx.AfterID = ""
	} else {
		rawAfterID := paramAfterID[0]
		rctx.AfterID = rawAfterID
	}
	paramBeforeID := req.Params["before_id"]
	if len(paramBeforeID) == 0 {
		rctx.BeforeID = ""
	} else {
		rawBeforeID := paramBeforeID[0]
		rctx.BeforeID = rawBeforeID
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) == 0 {
		rctx.Limit = 25
	} else {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			rctx.Limit = limit
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
		if rctx.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1, true))
		}
		if rctx.Limit > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`limit`, rctx.Limit, 1000, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetAllListsContext) OK(r *RankdbListsresult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.listsresult+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetAllListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetAllListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// ReindexListsContext provides the lists reindex action context.
type ReindexListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ListID string
}

// NewReindexListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller reindex action.
func NewReindexListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReindexListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReindexListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ReindexListsContext) OKFull(r *RankdbRanklistFull) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.ranklist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReindexListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ReindexListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReindexListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// RepairListsContext provides the lists repair action context.
type RepairListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Clear  bool
	ListID string
}

// NewRepairListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller repair action.
func NewRepairListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RepairListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RepairListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClear := req.Params["clear"]
	if len(paramClear) == 0 {
		rctx.Clear = false
	} else {
		rawClear := paramClear[0]
		if clear, err2 := strconv.ParseBool(rawClear); err2 == nil {
			rctx.Clear = clear
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("clear", rawClear, "boolean"))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RepairListsContext) OK(r *RankdbListopresult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.listopresult+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RepairListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RepairListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RepairListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// VerifyListsContext provides the lists verify action context.
type VerifyListsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Clear  bool
	ListID string
	Repair bool
}

// NewVerifyListsContext parses the incoming request URL and body, performs validations and creates the
// context used by the lists controller verify action.
func NewVerifyListsContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyListsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyListsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClear := req.Params["clear"]
	if len(paramClear) == 0 {
		rctx.Clear = false
	} else {
		rawClear := paramClear[0]
		if clear, err2 := strconv.ParseBool(rawClear); err2 == nil {
			rctx.Clear = clear
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("clear", rawClear, "boolean"))
		}
	}
	paramListID := req.Params["list_id"]
	if len(paramListID) > 0 {
		rawListID := paramListID[0]
		rctx.ListID = rawListID
		if ok := goa.ValidatePattern(`^[a-zA-Z0-9-_.]+$`, rctx.ListID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`list_id`, rctx.ListID, `^[a-zA-Z0-9-_.]+$`))
		}
		if utf8.RuneCountInString(rctx.ListID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 2, true))
		}
		if utf8.RuneCountInString(rctx.ListID) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`list_id`, rctx.ListID, utf8.RuneCountInString(rctx.ListID), 100, false))
		}
	}
	paramRepair := req.Params["repair"]
	if len(paramRepair) == 0 {
		rctx.Repair = false
	} else {
		rawRepair := paramRepair[0]
		if repair, err2 := strconv.ParseBool(rawRepair); err2 == nil {
			rctx.Repair = repair
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("repair", rawRepair, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyListsContext) OK(r *RankdbListopresult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.listopresult+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyListsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *VerifyListsContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *VerifyListsContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// BackupMultilistContext provides the multilist backup action context.
type BackupMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *MultiListBackup
}

// NewBackupMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller backup action.
func NewBackupMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*BackupMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := BackupMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *BackupMultilistContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/octet-stream")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Created sends a HTTP response with status code 201.
func (ctx *BackupMultilistContext) Created(r *RankdbCallback) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.callback+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *BackupMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *BackupMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// CreateMultilistContext provides the multilist create action context.
type CreateMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ErrorsOnly bool
	Results    bool
	Payload    *ListPayloadQL
}

// NewCreateMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller create action.
func NewCreateMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramErrorsOnly := req.Params["errors_only"]
	if len(paramErrorsOnly) == 0 {
		rctx.ErrorsOnly = false
	} else {
		rawErrorsOnly := paramErrorsOnly[0]
		if errorsOnly, err2 := strconv.ParseBool(rawErrorsOnly); err2 == nil {
			rctx.ErrorsOnly = errorsOnly
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("errors_only", rawErrorsOnly, "boolean"))
		}
	}
	paramResults := req.Params["results"]
	if len(paramResults) == 0 {
		rctx.Results = false
	} else {
		rawResults := paramResults[0]
		if results, err2 := strconv.ParseBool(rawResults); err2 == nil {
			rctx.Results = results
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("results", rawResults, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// DeleteMultilistContext provides the multilist delete action context.
type DeleteMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllInSets     []string
	ElementID     string
	ErrorsOnly    bool
	Lists         []string
	MatchMetadata *string
}

// NewDeleteMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller delete action.
func NewDeleteMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllInSets := req.Params["all_in_sets"]
	if len(paramAllInSets) > 0 {
		params := paramAllInSets
		rctx.AllInSets = params
	}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramErrorsOnly := req.Params["errors_only"]
	if len(paramErrorsOnly) == 0 {
		rctx.ErrorsOnly = false
	} else {
		rawErrorsOnly := paramErrorsOnly[0]
		if errorsOnly, err2 := strconv.ParseBool(rawErrorsOnly); err2 == nil {
			rctx.ErrorsOnly = errorsOnly
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("errors_only", rawErrorsOnly, "boolean"))
		}
	}
	paramLists := req.Params["lists"]
	if len(paramLists) > 0 {
		params := paramLists
		rctx.Lists = params
	}
	paramMatchMetadata := req.Params["match_metadata"]
	if len(paramMatchMetadata) > 0 {
		rawMatchMetadata := paramMatchMetadata[0]
		rctx.MatchMetadata = &rawMatchMetadata
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// GetMultilistContext provides the multilist get action context.
type GetMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AllInSets     []string
	ElementID     string
	Lists         []string
	MatchMetadata *string
}

// NewGetMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller get action.
func NewGetMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAllInSets := req.Params["all_in_sets"]
	if len(paramAllInSets) > 0 {
		params := paramAllInSets
		rctx.AllInSets = params
	}
	paramElementID := req.Params["element_id"]
	if len(paramElementID) > 0 {
		rawElementID := paramElementID[0]
		rctx.ElementID = rawElementID
		if ok := goa.ValidatePattern(`^[0-9]+$`, rctx.ElementID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`element_id`, rctx.ElementID, `^[0-9]+$`))
		}
		if utf8.RuneCountInString(rctx.ElementID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 1, true))
		}
		if utf8.RuneCountInString(rctx.ElementID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`element_id`, rctx.ElementID, utf8.RuneCountInString(rctx.ElementID), 20, false))
		}
	}
	paramLists := req.Params["lists"]
	if len(paramLists) > 0 {
		params := paramLists
		rctx.Lists = params
	}
	paramMatchMetadata := req.Params["match_metadata"]
	if len(paramMatchMetadata) > 0 {
		rawMatchMetadata := paramMatchMetadata[0]
		rctx.MatchMetadata = &rawMatchMetadata
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// PutMultilistContext provides the multilist put action context.
type PutMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ErrorsOnly bool
	Results    bool
	Payload    *ListPayloadQL
}

// NewPutMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller put action.
func NewPutMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*PutMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PutMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramErrorsOnly := req.Params["errors_only"]
	if len(paramErrorsOnly) == 0 {
		rctx.ErrorsOnly = false
	} else {
		rawErrorsOnly := paramErrorsOnly[0]
		if errorsOnly, err2 := strconv.ParseBool(rawErrorsOnly); err2 == nil {
			rctx.ErrorsOnly = errorsOnly
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("errors_only", rawErrorsOnly, "boolean"))
		}
	}
	paramResults := req.Params["results"]
	if len(paramResults) == 0 {
		rctx.Results = false
	} else {
		rawResults := paramResults[0]
		if results, err2 := strconv.ParseBool(rawResults); err2 == nil {
			rctx.Results = results
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("results", rawResults, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PutMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PutMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *PutMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// ReindexMultilistContext provides the multilist reindex action context.
type ReindexMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ErrorsOnly bool
	Payload    *ListQL
}

// NewReindexMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller reindex action.
func NewReindexMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReindexMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReindexMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramErrorsOnly := req.Params["errors_only"]
	if len(paramErrorsOnly) == 0 {
		rctx.ErrorsOnly = false
	} else {
		rawErrorsOnly := paramErrorsOnly[0]
		if errorsOnly, err2 := strconv.ParseBool(rawErrorsOnly); err2 == nil {
			rctx.ErrorsOnly = errorsOnly
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("errors_only", rawErrorsOnly, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReindexMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReindexMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ReindexMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// RestoreMultilistContext provides the multilist restore action context.
type RestoreMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Keep         bool
	ListIDPrefix *string
	ListIDSuffix *string
	Src          string
	SrcFile      string
}

// NewRestoreMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller restore action.
func NewRestoreMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*RestoreMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RestoreMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramKeep := req.Params["keep"]
	if len(paramKeep) == 0 {
		rctx.Keep = false
	} else {
		rawKeep := paramKeep[0]
		if keep, err2 := strconv.ParseBool(rawKeep); err2 == nil {
			rctx.Keep = keep
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("keep", rawKeep, "boolean"))
		}
	}
	paramListIDPrefix := req.Params["list_id_prefix"]
	if len(paramListIDPrefix) > 0 {
		rawListIDPrefix := paramListIDPrefix[0]
		rctx.ListIDPrefix = &rawListIDPrefix
	}
	paramListIDSuffix := req.Params["list_id_suffix"]
	if len(paramListIDSuffix) > 0 {
		rawListIDSuffix := paramListIDSuffix[0]
		rctx.ListIDSuffix = &rawListIDSuffix
	}
	paramSrc := req.Params["src"]
	if len(paramSrc) == 0 {
		rctx.Src = ""
	} else {
		rawSrc := paramSrc[0]
		rctx.Src = rawSrc
	}
	paramSrcFile := req.Params["src_file"]
	if len(paramSrcFile) == 0 {
		rctx.SrcFile = ""
	} else {
		rawSrcFile := paramSrcFile[0]
		rctx.SrcFile = rawSrcFile
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RestoreMultilistContext) OK(r *RankdbRestoreresult) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.restoreresult+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RestoreMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RestoreMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// VerifyMultilistContext provides the multilist verify action context.
type VerifyMultilistContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Clear      bool
	Elements   bool
	ErrorsOnly bool
	Repair     bool
	Payload    *ListQL
}

// NewVerifyMultilistContext parses the incoming request URL and body, performs validations and creates the
// context used by the multilist controller verify action.
func NewVerifyMultilistContext(ctx context.Context, r *http.Request, service *goa.Service) (*VerifyMultilistContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VerifyMultilistContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClear := req.Params["clear"]
	if len(paramClear) == 0 {
		rctx.Clear = false
	} else {
		rawClear := paramClear[0]
		if clear, err2 := strconv.ParseBool(rawClear); err2 == nil {
			rctx.Clear = clear
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("clear", rawClear, "boolean"))
		}
	}
	paramElements := req.Params["elements"]
	if len(paramElements) == 0 {
		rctx.Elements = false
	} else {
		rawElements := paramElements[0]
		if elements, err2 := strconv.ParseBool(rawElements); err2 == nil {
			rctx.Elements = elements
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("elements", rawElements, "boolean"))
		}
	}
	paramErrorsOnly := req.Params["errors_only"]
	if len(paramErrorsOnly) == 0 {
		rctx.ErrorsOnly = false
	} else {
		rawErrorsOnly := paramErrorsOnly[0]
		if errorsOnly, err2 := strconv.ParseBool(rawErrorsOnly); err2 == nil {
			rctx.ErrorsOnly = errorsOnly
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("errors_only", rawErrorsOnly, "boolean"))
		}
	}
	paramRepair := req.Params["repair"]
	if len(paramRepair) == 0 {
		rctx.Repair = false
	} else {
		rawRepair := paramRepair[0]
		if repair, err2 := strconv.ParseBool(rawRepair); err2 == nil {
			rctx.Repair = repair
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("repair", rawRepair, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VerifyMultilistContext) OK(r *RankdbResultlist) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.rankdb.resultlist+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *VerifyMultilistContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *VerifyMultilistContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}
